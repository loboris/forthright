/*
 *  Copyright 2016 Niclas Hedhman, All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* The Forth environemnt is passed to assembler in a C struct,

	typedef struct
	{
		void* data_segment;  		// offset 0
		int data_segment_size;		// offset 4

		void* data_stack;		// offset 8
		int data_stack_size;;		// offset 12

		void* return_stack;;		// offset 16
		int return_stack_size;;		// offset 20

		void* input_buffer;;		// offset 24
		int input_buffer_size;;		// offset 28

		void* word_buffer;;		// offset 32
		int word_buffer_size;;		// offset 36

		void* word_buffer_ptr;;		// offset 40
		int word_buffer_counter;;	// offset 44

		// System variables.
		int state;			// offset 48
		void* latest;			// offset 52
		void* dp;			// offset 56
		void* s0;			// offset 60
		int base;			// offset 64
		void* currkey			// offset 68
		void* bufftop			// offset 72
		int interpret_is_lit		// offset 76
		int initializing		// offset 80
		int iecho			// offset 84
	} system_t;

	and on the ESP8266 C-compiler the address of that is passed to the entry point in the
	a2 register. All members of the struct are 4 byte aligned.

	To access the members in the system_t struct use the macro defined below with the offsets defined below.

	The following definitions sets the offsets within the C struct.
*/
	.equ	system_t_data_segment, 0
	.equ	system_t_data_segment_size, 4
	.equ	system_t_data_stack, 8
	.equ	system_t_data_stack_size, 12
	.equ	system_t_return_stack, 16
	.equ	system_t_return_stack_size, 20
	.equ	system_t_input_buffer, 24
	.equ	system_t_input_buffer_size, 28
	.equ	system_t_word_buffer, 32
	.equ	system_t_word_buffer_size, 36
	.equ	system_t_word_buffer_ptr, 40
	.equ	system_t_word_buffer_counter, 44

	.equ	system_t_state,48
	.equ	system_t_latest,52
	.equ	system_t_dp,56
	.equ	system_t_s0,60
	.equ	system_t_base,64
	.equ	system_t_currkey,68
	.equ	system_t_bufftop,72
	.equ	system_t_interpret_is_lit,76
	.equ	system_t_initializing,80
	.equ	system_t_echo,84

	.macro READ_VAR reg, member
	l32i \reg, a12, \member
	.endm

	.macro WRITE_VAR reg, member
	s32i \reg, a12, \member
	.endm


/* ESP8266 doesn't push the return address automatically when it makes a call to somewhere else. Instead
 * it simply places the return address in register a0. If the routine doesn't make any further calls, no
 * stack will be used, but it becomes the called routines problem to save the return stack if it calls
 * any further methods.
 * This macro is only to be used when subroutines calls other subroutines. The native Forth words don't
 * need to use this macro, as they operate at the same stack level, and keeps a0 and a1 unchanged.
 */
	.macro SAFE_CALL label
	addi sp, sp, -4			// adjust stack pointer
	s32i a0, sp, 4			// save return address
	call0 \label			// call C putChar()
	l32i a0, sp, 4			// get the saved return address
	addi sp, sp, 4			// restore stack pointer
	.endm

/* Calling into C brings the unknown of which registers will be used and corrupted. To be safe,
 * all calls to C will push away all the primary registers to ensure no corruption.
 * The registers that are not working registers are;a12, a13, a14 and a15
 */
	.macro C_CALL label
	addi sp, sp, -32		// adjust stack pointer
	s32i a0, sp, 28			// save return address
	s32i a8, sp, 20			// save a8
	s32i a12, sp, 16		// save a12
	s32i a13, sp, 12		// save a13
	s32i a14, sp, 8			// save a14
	s32i a15, sp, 4			// save a15
	call0 \label			// call C
	l32i a15, sp, 4			// get saved a15
	l32i a14, sp, 8			// get saved a14
	l32i a13, sp, 12		// get saved a13
	l32i a12, sp, 16		// get saved a12
	l32i a8, sp, 20			// get saved a8
	l32i a0, sp, 28			// get the saved return address
	addi sp, sp, 32			// restore stack pointer
	.endm

/* Definition of static text, and putChars macro for output. */

	.macro S_TEXT name, value
	.section .irom0.text
	.align 4
	.literal TEXT_ADDR_\name, TEXT_\name
	.section .rodata
	.align 4
	TEXT_\name:	.ascii "\value"
	.set TEXT_SIZE_\name, .-TEXT_\name
	.endm

	.macro PRINTS text
	l32r a2, TEXT_ADDR_\text
	movi a3, TEXT_SIZE_\text
	C_CALL forthright_putChars
	.endm

	.macro PRINTPOINTER reg
	mov a2, \reg
	C_CALL forthright_printHex
	.endm

	.macro PRINTWORD linkpointer
	movi a2, \linkpointer
	C_CALL forthright_printWord1
	.endm
